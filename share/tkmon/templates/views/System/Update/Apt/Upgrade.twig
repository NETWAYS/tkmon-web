<h4 id="upgrade-visible-target">{% trans "Upgrade" %}</h4>

<div class="container-spacer-down"></div>

<div class="alert alert-danger">
    {% trans %}
    <p>
        This performs a real upgrade of your system. Press the following button to proceed.
    </p>
    <p>
        Please be patient. We update the package cache, make a dry run and do a real upgrade.
    </p>
    {% endtrans %}
</div>

<button type="button" class="btn btn-danger disabled" id="start-real-upgrade">
    <i class="icon-exclamation-sign"></i> {% trans "Yes, upgrade my system" %}
</button>

<div id="message-target" class="container-spacer-down">

</div>

<div id="upgrade-process-target" class="container-spacer-down hidden">
    <div class="progress progress-info" style="margin: 0 20px 0 20px;">
        <div class="bar" style="width: 1px"></div>
    </div>

    <div>
        <dl class="dl-horizontal">
            <dt>Progress</dt>
            <dd><span id="progress-value">0%</span></dd>
            <dt>Runtime</dt>
            <dd><span id="runtime-value">0s</span></dd>
        </dl>
    </div>

    <div>
        <div class="accordion" id="output">
            <div class="accordion-group">
                <div class="accordion-heading">
                    <a class="accordion-toggle" data-toggle="collapse" data-parent="#output" href="#data-info">
                        <strong>{% trans 'Info' %}</strong>
                    </a>
                </div>
                <div id="data-info" class="accordion-body collapse">
                    <div class="accordion-inner">
                        <pre id="info-target">No info</pre>
                    </div>
                </div>
            </div>

            <div class="accordion-group">
                <div class="accordion-heading">
                    <a class="accordion-toggle" data-toggle="collapse" data-parent="#output" href="#data-error">
                        <strong>{% trans 'Error' %}</strong>
                    </a>
                </div>
                <div id="data-error" class="accordion-body collapse">
                    <div class="accordion-inner">
                        <pre id="error-target">No error</pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="upgrade-output-target" class="container-spacer-down">
</div>

<script>
    require(['jquery', 'bootstrap'], function($) {
        "use strict";

        var upgradeUrl = '{{ web_link('Upgrade') }}';
        var statusUrl = '{{ web_link('UpgradeStatus') }}';
        var startTime = 0;

        /**
         * Clear previous output
         */
        var clearProgress = function(show) {
            startTime = 0;
            showProcessFrame(show);
            $('#upgrade-process-target').find('div.progress div.bar').css('width', 0);
            $('#progress-value').html('0%');
            $('#runtime-value').html('0s');
            $('#error-target').html('No errors.');
            $('#info-target').html('No info.');
            $('#message-target').html('');
        };

        /**
         * Toggle status boxes
         */
        var showProcessFrame = function(show) {
            if (show === true) {
                $('#upgrade-process-target').removeClass('hidden');
            } else {
                $('#upgrade-process-target').addClass('hidden');
            }
        };

        /**
         * Draw message boxes on page
         */
        var messageBox = function(text, cls) {
            cls = cls || 'success';
            var html = '<div class="alert alert-' + cls + '">' + text + '</div>';
            $('#message-target').html(html);
        };

        var formatSeconds = function(timeInSeconds) {
            var sec_num = parseInt(timeInSeconds, 10);
            var hours = Math.floor(sec_num / 3600);
            var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
            var seconds = sec_num - (hours * 3600) - (minutes * 60);

            var out = [];

            if (hours > 0) {
                out.push(hours + 'h');
            }

            if (minutes > 0) {
                out.push(minutes + 'm');
            }

            if (seconds > 0) {
                out.push(seconds + 's');
            }

            if (out.length <= 0) {
                return '0s';
            }

            return out.join(' ');
        }

        /**
         * Update process information on page
         */
        var updateProgress = function(r) {
            var percent = r.status.progress;
            $('#upgrade-process-target').find('div.progress div.bar').css('width', String(percent) + '%');
            $('#progress-value').html(String(Math.round(percent)) + '%');

            var runtimeSeconds = Math.floor(r.status.nowSeconds - r.status.startTimeSeconds);

            console.log(runtimeSeconds);

            $('#runtime-value').html(formatSeconds(runtimeSeconds));
            $('#error-target').html(r.error ? r.error : 'No errors.');
            $('#info-target').html(r.info ? r.info : 'No info.');
        };

        /**
         *  Start upgrade, update package cache and trigger traceStatus
         */
        var startUpgrade = function() {
            $('#start-real-upgrade').addClass('disabled');
            $.ajax(upgradeUrl, {
                type: 'POST',
                data: {
                    doUpgrade: 1
                },
                beforeSend: function() {
                    clearProgress(true);
                }
            }).done(function(data, textStatus) {
                //clearProgress(true);
                if (data && data.success === true) {
                    window.setTimeout(traceStatus, 10);
                } else {
                    if (data.errors[0]) {
                        showProcessFrame(false);
                        var error = data.errors[0].message;

                        if (String(error).match(/^no pending updates/i)) {
                            messageBox('{% trans 'No updates found, everything ok' %}')
                        } else {
                            messageBox(error, 'error');
                        }

                        $('#start-real-upgrade').removeClass('disabled');
                    }
                }
            });
        };

        /**
         * Free the upgrade button
         */
        var stopUpgrade = function() {
            $('#start-real-upgrade').removeClass('disabled');
        };

        /**
         * Query update status and execute callbacks on the data
         */
        var traceHandler = function(doneCallback, alwaysCallback) {
            if (typeof(doneCallback) !== 'function' && typeof(alwaysCallback) !== 'function') {
                throw('No calback given as argument');
            }

            doneCallback = doneCallback || function() {};
            alwaysCallback = alwaysCallback || function() {};

            $.ajax(statusUrl, {
                type: 'GET'
            }).done(doneCallback)
                .always(alwaysCallback);
        };

        /**
         * Update current update status automatically
         */
        var traceStatus = function() {
            var stop = false;

            var doneHandler = function(data) {
                if (data !== null) {
                    updateProgress(data);
                }

                if (data === null || data.running === false) {
                    stop = true;
                    stopUpgrade();
                    messageBox('{% trans 'System upgrade was successful.' %}');
                    $('#start-real-upgrade').removeClass('disabled');
                    $('#restart-required-target').Html5AjaxContent();


                    if (data.status.hasErrors === true) {
                        messageBox('{% trans 'Errors occurred, please examine error panel for more information.' %}', 'error');
                    }
                }
            };

            var alwaysHandler = function() {
                window.setTimeout(function() {
                    if (stop === false) {
                        traceHandler(doneHandler, alwaysHandler);
                    }
                }, 500);
            };

            $('#restart-required-target').Html5AjaxContent();
            alwaysHandler();
        };

        $('#start-real-upgrade').click(startUpgrade);

        $('a[href=#tab-upgrade]').on('shown', function() {
            traceHandler(function(data) {
                if (data && data.running === true) {
                    $('#start-real-upgrade').addClass('disabled');
                    clearProgress(true);
                    traceStatus();
                } else {
                    $('#start-real-upgrade').removeClass('disabled');
                }
            });
        });

    });
</script>
